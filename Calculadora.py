# -*- coding: utf-8 -*-
"""Ucamp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15-l7nkkG6Nx093b1kEOid8Rd7pqp0vaA
"""

print("Hola mundo")

"""Tipos de variable"""

variable = "Hola Mundo"

print(variable)

a = 5

a

print(a)

"""int / Números enteros (positivos y negativos) edad = 25
float / Números decimales precio = 19.99
str / Cadena de texto  nombre = 'Ana'
bool /  Valores Booleanos (Verdadero/Falso) es_mayor = True
"""

edad = 20  #int
altura = 1.50 #float
nombre = "Ana"#str / object
es_mayor = True #Bool

edad
altura
nombre
es_mayor

print(edad, altura, nombre, es_mayor)

E1_nombre = "Carlos"
E1_edad = 30

print(f"{E1_nombre} tiene {E1_edad} años. ")

Precio_producto = 25
descuento = 18
precio_final = Precio_producto - (Precio_producto * (descuento / 100))

print(f"El precio final del producto es {precio_final} pesos.")

valor = "20"

type(valor)

valor = int(valor) # sirvio para cambiar el str a int que es el 20

type(valor)

"""Función input"""

nombre = input("Ingrese su nombre: ") # input sirve para ingresar datos en la caja de dialogo

nombre

"""Ejercicio: Calculadora Básica en Python
1. Solicitar dos números al usuario
2. Pedir al usuario que elija una operación entre suma,resta, multiplicación, división, división entera, residuo y potencia.
3. Mostrar el resultado de la operación seleccionada.
4. Manejar errores, por ejemplo, evitar la división entre cero
"""

# Solicitar los dos números al usuario
num1 = float(input("Introduce el primer número: "))
num2 = float(input("Introduce el segundo número: "))

# Mostrar las opciones de operaciones
print("\nSelecciona una operación:")
print("1. Suma")
print("2. Resta")
print("3. Multiplicación")
print("4. División")
print("5. División entera")
print("6. Residuo")
print("7. Potencia")

# Solicitar la operación
operacion = input("Elige una opción (1/2/3/4/5/6/7): ")

# Realizar la operación correspondiente
try:
    if operacion == "1":
        resultado = num1 + num2
        print(f"El resultado de la suma es: {resultado}")
# En la programación de Python, elif es una abreviatura de "else if". Es una parte crucial para tomar decisiones en la programación y permite concatenar múltiples condiciones para que se evalúen de manera secuencial hasta que una de ellas se cumpla.

# Cuando se utiliza elif, se evalúa cada condición en el orden en que aparecen en el código. Si una condición se evalúa como verdadera, se ejecuta el bloque de código que sigue a esa condición y se salta el resto de las cláusulas elif y else en ese bloque.

# Por ejemplo, en un bloque condicional después de un if inicial, puedes agregar una o más cláusulas elif para verificar condiciones adicionales si la condición if anterior no se cumple
    elif operacion == "2":
        resultado = num1 - num2
        print(f"El resultado de la resta es: {resultado}")
    elif operacion == "3":
        resultado = num1 * num2
        print(f"El resultado de la multiplicación es: {resultado}")
    elif operacion == "4":
        if num2 == 0:
            print("Error: No se puede dividir entre cero.")
        else:
            resultado = num1 / num2
            print(f"El resultado de la división es: {resultado}")
    elif operacion == "5":
        if num2 == 0:
            print("Error: No se puede realizar una división entera entre cero.")
        else:
            resultado = num1 // num2
            print(f"El resultado de la división entera es: {resultado}")
    elif operacion == "6":
        if num2 == 0:
            print("Error: No se puede obtener el residuo de una división entre cero.")
        else:
            resultado = num1 % num2
            print(f"El residuo de la división es: {resultado}")
    elif operacion == "7":
        resultado = num1 ** num2
        print(f"El resultado de la potencia es: {resultado}")
    else:
        print("Opción no válida. Por favor elige una opción entre 1 y 7.")
except ValueError:
    print("Error: Asegúrate de haber introducido un número válido.")

### Explicación:
#1. **Ingreso de los números**: El código solicita al usuario dos números, `num1` y `num2`, y los convierte a tipo `float` para permitir decimales.
#2. **Selección de operación**: Se muestran las opciones para que el usuario seleccione la operación deseada.
#3. **Operaciones**: Según la selección del usuario, se realiza la operación correspondiente.
#4. **Manejo de errores**:
  # - Si se intenta dividir entre cero, el código manejará ese error con un mensaje.
  # - También se maneja el caso de que el usuario ingrese valores no numéricos con un `ValueError`.

#Puedes probar el código en tu entorno y ver cómo responde a las diferentes operaciones y errores.

"""Un string es una secuencia de caracteres utilizada para representar texto en Python. Se puede escribir entre comillas simples ('Hola') o dobles ("Hola")
Operaciones comunes con string
1. Concatenación ( + para unir texto)
2. Repetición (* para repetir texto)
3. Indexación ([] para acceder a un carácter)
4. Slicing ([:] para obtener partes de un string)
5. Métodos útiles (.lower(), .upper(), .replace(), .etc)
"""

mensaje = "Hola, mundo"

mensaje

print(mensaje)

# Acceder a caracteres individuales
mensaje[0]

# Convertir a mayúsculas
mensaje.upper()

#mensaje = mensaje.upper()  --forma de dejar "fijo" un cambio de la misma variable

#convertir en minusculas
mensaje.lower()

#Separar un string en palabras
frase = "Python es divertido"

frase

palabras = frase.split()
print(palabras)

#Remplazar palabras
nueva_frase = frase.replace("divertido", "fácil")
print(nueva_frase)

# Contar ocurrencias de una letra en un string
texto = "banana"
letra = "a"
conteo = texto.count(letra)
print(f"la letra '{letra}' aparece {conteo} veces")  # 3

texto.count('a')

# Inertir un string
invertido = texto [:: -1]
print(invertido)  # 'ananab'

"""== Igual a (5 == 5 True)
!= Diferente de (5 != 3 True)
< Menor que ( 3 < 5 True)
> Mayor que (10 > 2 True)
<= Menor o igual que (7 <= 7 True)
>= Mayor o igual que (8 >= 10  False)

Listas: Coleción ordenada de elementos, modificable ([])
Tuplas: Colección ordenada de elementos, **Inmutable** (())
"""

# Lista
frutas = ["manzana", "banana", "cereza"]
frutas

frutas.append("naranja") # Agregar
print(frutas)

frutas[1]
frutas[2]

# Tupla
colores = ("rojo", "verde", "azul")
colores

colores.append("amarillo") # Error: No se puede modificar

"""Que es un Array:"""

def obtener_dato(mensaje, tipo):
    """Función para obtener un dato del usuario y validarlo"""
    while True:
        dato = input(mensaje)
        if tipo == 'texto':
            if dato.strip() != "":
                return dato
            else:
                print("El campo no puede estar vacío. Intenta nuevamente.")
        elif tipo == 'numero':
            try:
                dato = float(dato)
                if dato > 0:
                    return dato
                else:
                    print("El número debe ser mayor que 0. Intenta nuevamente.")
            except ValueError:
                print("Por favor, ingresa un número válido. Intenta nuevamente.")

def calcular_imc(peso, estatura):
    """Función para calcular el Índice de Masa Corporal (IMC)"""
    return peso / (estatura ** 2)

def main():
    """Función principal para interactuar con el usuario"""
    # Solicitar datos
    nombre = obtener_dato("Introduce tu nombre: ", 'texto')
    apellido_paterno = obtener_dato("Introduce tu apellido paterno: ", 'texto')
    apellido_materno = obtener_dato("Introduce tu apellido materno: ", 'texto')
    edad = obtener_dato("Introduce tu edad: ", 'numero')
    peso = obtener_dato("Introduce tu peso (kg): ", 'numero')
    estatura = obtener_dato("Introduce tu estatura (m): ", 'numero')

    # Calcular IMC
    imc = calcular_imc(peso, estatura)

    # Desplegar la información
    print("\nDatos ingresados:")
    print(f"Nombre: {nombre} {apellido_paterno} {apellido_materno}")
    print(f"Edad: {edad} años")
    print(f"Peso: {peso} kg")
    print(f"Estatura: {estatura} m")
    print(f"Índice de Masa Corporal (IMC): {imc:.2f}")

if __name__ == "__main__":
    main()